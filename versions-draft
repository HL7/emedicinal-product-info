# Version Control of FHIR ePI Document Bundles

## Overview

The electronic Product Information (ePI) in FHIR is represented as a `Bundle` resource of type `document`, containing a `Composition` resource as the first entry, along with referenced resources such as `MedicinalProductDefinition`, `Organization`, and others that collectively define the drug label. Drug labels have a complex lifecycle, involving an authoritative version (akin to a "master branch") approved by health authorities and multiple concurrent draft versions under regulatory review. This page describes how to manage the versioning of ePI document bundles using a version control model inspired by Git, supporting the following lifecycle requirements:

- A **master branch** captures the sequence of approved ePI versions authorized by health authorities.
- Multiple **draft versions** may exist concurrently, representing proposed updates under regulatory review.
- Approved draft versions are **squashed and merged** into the master branch, forming a new approved version.
- Draft versions may be **merged together** before submission or approval to consolidate changes.
- Draft versions may be **withdrawn** by the submitting organization or **rejected** by the regulator, in which case they are not merged into the master branch.

This versioning approach ensures traceability, reproducibility, and alignment with regulatory processes while leveraging FHIR resources and principles.

## Version Control Model

The version control model for ePI document bundles is structured around the following concepts:

1. **Master Branch**: Represents the canonical, regulator-approved versions of the ePI. Each approved version is a distinct `Bundle` resource with a unique identifier and version number, stored in the master branch history.
2. **Draft Branches**: Represent concurrent draft versions of the ePI under development or regulatory review. Each draft is a separate `Bundle` resource, derived from a specific version in the master branch or another draft.
3. **Merging**: Approved drafts are squashed (consolidated into a single set of changes) and merged into the master branch, creating a new approved `Bundle`. Drafts may also be merged with each other to consolidate proposed changes.
4. **Discarding**: Drafts that are withdrawn or rejected are marked as inactive and not merged into the master branch, preserving the integrity of the approved history.

### FHIR Resource Representation

The version control model is implemented using the following FHIR resources:

- **Bundle (type: document)**: The ePI document itself, containing the `Composition` and referenced resources (e.g., `MedicinalProductDefinition`, `Organization`). Each version, whether a master branch (approved) or draft, is a distinct `Bundle` instance stored in a FHIR server.
- **Provenance**: Tracks the history and relationships between ePI `Bundle` versions, including events such as derivation, merging, approval, rejection, or withdrawal. `Provenance` resources are stored **separately** in the FHIR server, not as entries within the ePI `Bundle`, to maintain the immutability of the document and support complex lifecycle relationships. Each `Provenance` resource links to one or more `Bundle` instances via the `Provenance.target` element (e.g., targeting `Bundle/epi-456`) and may reference source `Bundle` instances via `Provenance.entity` (e.g., for drafts or merges). This separation ensures traceability and auditability without altering the ePI document's content.
- **List**: Optionally used to group related versions (e.g., all drafts for a specific submission) for easier navigation and tracking within the FHIR server.
- **DocumentReference**: Optionally used to reference ePI `Bundle` instances in external systems or repositories, facilitating version management and discovery.

**Note on Provenance Separation**: Storing `Provenance` resources separately aligns with FHIR best practices for tracking resource lifecycles and supports the Git-like versioning model described in this guide. For example, a `Provenance` resource documenting the merge of two draft `Bundle` instances (e.g., Draft A and Draft B into Draft C) references both source `Bundle` resources in `Provenance.entity` and targets the resulting `Bundle` in `Provenance.target`. This approach enables querying of lifecycle events (e.g., `GET /Provenance?target=Bundle/epi-456`) and ensures compliance with regulatory requirements for audit trails independent of the approved ePI document.

#### Identifiers for Versioning

- **Bundle.id**: A logical identifier (`id` type) that remains constant across all versions of an ePI document within a single FHIR server (e.g., `epi-456`). It enables resource retrieval (e.g., `GET /Bundle/epi-456`) and versioning (e.g., `GET /Bundle/epi-456/_history/1`). When exchanging a `Bundle` with an external system (e.g., EMA’s FHIR server), the receiving server will typically assign its own `Bundle.id` (e.g., `ema-epi-12345`), as `Bundle.id` is server-specific and not preserved across systems.
- **Bundle.meta.versionId**: A version-specific identifier (`id` type) that uniquely distinguishes each version of the `Bundle` within a server (e.g., `draft-initial`, `1`, `draft-stability`). The combination of `Bundle.id` and `Bundle.meta.versionId` (e.g., `epi-456/draft-stability`) is unique per version on a given server. For drafts, alphanumeric values (e.g., `draft-stability`) are recommended for clarity. For approved versions, sequential numbers (e.g., `1`, `2`) align with FHIR server history conventions.
- **Bundle.identifier**: A set of business-level identifiers (`Identifier` type) that provide globally unique references for the ePI document and its versions. Each ePI `Bundle` should include at least two `Bundle.identifier` entries:
  - **Consistent Identifier**: Remains constant across all versions of the ePI document (e.g., `system: http://yourcompany.com/epi`, `value: epi-456`). This identifier groups all versions (drafts and approved) under the same logical ePI, enabling queries like `GET /Bundle?identifier=http://yourcompany.com/epi|epi-456`.
  - **Version-Specific Identifier**: Changes for each version of the ePI document (e.g., `system: http://yourcompany.com/epi-version`, `value: epi-456-draft-initial` for the initial draft, `epi-456-1` for the first approved version). This identifier tracks individual versions across systems, enabling queries like `GET /Bundle?identifier=http://yourcompany.com/epi-version|epi-456-draft-stability`.
- **Implementation Note**: Ensure both `Bundle.identifier` entries are included in every ePI `Bundle` with consistent `system` and `value` conventions. The consistent identifier’s `system` (e.g., `http://yourcompany.com/epi`) defines the namespace for the ePI document, while the version-specific identifier’s `system` (e.g., `http://yourcompany.com/epi-version`) defines the namespace for version tracking. Use conditional updates (e.g., `PUT /Bundle?identifier=http://yourcompany.com/epi|epi-456`) to preserve your `Bundle.id` when storing updated versions from external servers. Multiple `identifier` entries may include manufacturer and regulatory identifiers (e.g., `system: http://ema.europa.eu/epi`). When exchanging with external servers, use the consistent `Bundle.identifier` to match incoming `Bundle` instances to your ePI document and the version-specific `Bundle.identifier` to track specific versions.

### Master Branch

The master branch is a sequence of approved ePI `Bundle` resources, each representing a regulator-authorized version of the drug label. Key attributes include:

- **`Bundle.identifier`**: A globally unique identifier for the ePI document, consistent across all versions (e.g., `system: http://yourcompany.com/epi`, `value: epi-456`), with a version-specific identifier (e.g., `system: http://yourcompany.com/epi-version`, `value: epi-456-1`).
- **`Bundle.meta.versionId`**: A FHIR-managed version identifier (e.g., `1`, `2`) that increments with each approved version.
- **`Composition.version`**: A business version number (e.g., `1.0`, `1.1`) aligned with regulatory versioning conventions, stored in the `Composition` resource within the `Bundle`.
- **`Bundle.meta.lastUpdated`**: The timestamp of the approval or last update to the version.
- **`Provenance`**: A `Provenance` resource linked to each `Bundle`, documenting the approval event, the approving authority (e.g., via `Provenance.agent.who`), and the relationship to the previous master branch version (via `Provenance.entity.what` and `Provenance.entity.role` set to `derivation`).

### Draft Branches

Draft versions are represented as separate ePI `Bundle` resources, each derived from an existing master branch version or another draft. Key attributes include:

- **`Bundle.identifier`**: Matches the consistent identifier of the master branch `Bundle` (e.g., `system: http://yourcompany.com/epi`, `value: epi-456`) and includes a version-specific identifier (e.g., `system: http://yourcompany.com/epi-version`, `value: epi-456-draft-stability`).
- **`Bundle.meta.profile`**: Includes a profile or tag (e.g., `http://hl7.org/fhir/StructureDefinition/epi-draft`) to indicate the draft status.
- **`Bundle.meta.versionId`**: A temporary version identifier for the draft, managed by the system hosting the draft (e.g., `draft-stability`).
- **`Composition.status`**: Set to `preliminary` to indicate the draft is not yet approved.
- **`Provenance`**: A `Provenance` resource linked to the draft `Bundle`, documenting:
  - The source version (e.g., the master branch `Bundle` or another draft) via `Provenance.entity.what` with `Provenance.entity.role` set to `source`.
  - The organization responsible for the draft (e.g., the pharmaceutical company) via `Provenance.agent.who`.
  - The creation or modification event (e.g., `draft-created`, `draft-submitted`) via `Provenance.activity`.

### Merging Drafts into the Master Branch

When a draft is approved by the regulator, it is squashed (consolidated into a single, coherent set of changes) and merged into the master branch as a new approved `Bundle`. The process is as follows:

1. **Create a New Master Branch Bundle**:
   - Copy the approved draft `Bundle` to create a new `Bundle` instance.
   - Update `Bundle.meta.versionId` to the next version number in the master branch sequence (e.g., `2`).
   - Update `Bundle.identifier` to include the consistent identifier (e.g., `epi-456`) and a new version-specific identifier (e.g., `epi-456-2`).
   - Update `Composition.version` to the next regulatory version number (e.g., `1.1`).
   - Set `Composition.status` to `final`.
   - Update `Bundle.meta.lastUpdated` to the approval timestamp.

2. **Document the Merge with Provenance**:
   - Create a `Provenance` resource linked to the new master `Bundle`.
   - Reference the approved draft `Bundle` as the source via `Provenance.entity.what` (using its version-specific `Bundle.identifier`) with `Provenance.entity.role` set to `source`.
   - Record the approval event via `Provenance.activity` (e.g., using a code like `approve` from a relevant code system).
   - Identify the regulator as the approving agent via `Provenance.agent.who`.

3. **Archive the Draft**:
   - Update the draft `Bundle` to reflect its incorporation into the master branch (e.g., by tagging it as `approved` or linking it to the new master `Bundle` via `Provenance`).
   - Optionally, retain the draft `Bundle` in a read-only state for audit purposes.

### Merging Drafts Together

Drafts may be merged to consolidate changes before regulatory submission. This is represented as follows:

1. **Create a Consolidated Draft Bundle**:
   - Create a new `Bundle` instance incorporating changes from the source drafts.
   - Retain the consistent `Bundle.identifier` (e.g., `system: http://yourcompany.com/epi`, `value: epi-456`) and assign a new version-specific `Bundle.identifier` (e.g., `system: http://yourcompany.com/epi-version`, `value: epi-456-draft-merged`).
   - Assign a new `Bundle.meta.versionId` for the consolidated draft (e.g., `draft-merged`).
   - Set `Composition.status` to `preliminary`.

2. **Document the Merge with Provenance**:
   - Create a `Provenance` resource linked to the new draft `Bundle`.
   - Reference the source draft `Bundle` resources via multiple `Provenance.entity` entries, each with `Provenance.entity.role` set to `source` and using their version-specific `Bundle.identifier`.
   - Record the merge event via `Provenance.activity` (e.g., `merge-drafts`).
   - Identify the organization performing the merge via `Provenance.agent.who`.

### Withdrawing or Rejecting Drafts

Drafts that are withdrawn by the submitting organization or rejected by the regulator are not merged into the master branch. The process is as follows:

1. **Mark the Draft as Inactive**:
   - Update the draft `Bundle` by setting `Composition.status` to `entered-in-error` (for withdrawal) or adding a custom tag to indicate rejection (e.g., `rejected`).
   - Optionally, include a narrative in `Composition.text` explaining the reason for withdrawal or rejection.

2. **Document the Status Change with Provenance**:
   - Create a `Provenance` resource linked to the draft `Bundle`.
   - Record the withdrawal or rejection event via `Provenance.activity` (e.g., `withdraw` or `reject`).
   - Identify the responsible party (e.g., the organization or regulator) via `Provenance.agent.who`.
   - Reference the draft `Bundle` via `Provenance.entity.what` (using its version-specific `Bundle.identifier`) with `Provenance.entity.role` set to `source`.

3. **Retain for Audit**:
   - Retain the draft `Bundle` and its `Provenance` in the system for audit and traceability, ensuring it is not used for further development unless reactivated.

### Implementation Considerations

- **Storage and Retrieval**: Store ePI `Bundle` resources in a FHIR server or document repository. Use the consistent `Bundle.identifier` (e.g., `http://yourcompany.com/epi/epi-456`) to retrieve all versions of an ePI document and the version-specific `Bundle.identifier` (e.g., `http://yourcompany.com/epi-version/epi-456-draft-stability`) to retrieve a specific version. Implementers may use a `List` resource to group related drafts or versions for easier navigation.
- **Version Identifiers**: Align `Composition.version` with regulatory versioning conventions (e.g., `1.0`, `1.1`). Use `Bundle.meta.versionId` for system-managed versioning, ensuring uniqueness within the master branch and draft branches. The version-specific `Bundle.identifier` complements `Bundle.meta.versionId` by providing a portable, cross-system version identifier.
- **Provenance Granularity**: Maintain a robust `Provenance` history to ensure traceability. Each significant event (e.g., draft creation, approval, rejection, or exchange with an external server) should have a corresponding `Provenance` resource. Use the version-specific `Bundle.identifier` in `Provenance.entity` to reference specific versions across systems.
- **Regulatory Compliance**: Ensure that versioning practices comply with regional regulations (e.g., FDA, EMA). Include regulatory-assigned identifiers (e.g., `system: http://ema.europa.eu/epi`) in `Bundle.identifier` where required, alongside manufacturer identifiers.
- **Concurrency**: Support concurrent draft development by isolating draft `Bundle` instances. Use `Provenance` to track dependencies and merges between drafts, referencing version-specific `Bundle.identifier` values.
- **Auditability**: Retain all `Bundle` and `Provenance` resources, including withdrawn or rejected drafts, to support audits and regulatory inspections. The version-specific `Bundle.identifier` enhances auditability by enabling precise version tracking.
- **Cross-Server Exchange and Conditional Updates**:
  - When exchanging ePI `Bundle` resources with external systems (e.g., EMA’s FHIR server), the receiving server will typically assign a new `Bundle.id` (e.g., `ema-epi-12345`) while preserving both `Bundle.identifier` entries (consistent and version-specific). The consistent `Bundle.identifier` (e.g., `system: http://yourcompany.com/epi`, `value: epi-456`) ensures the ePI’s identity is maintained, while the version-specific `Bundle.identifier` (e.g., `system: http://yourcompany.com/epi-version`, `value: epi-456-draft-initial`) tracks the specific version.
  - To maintain consistency of `Bundle.id` on your server when receiving an updated ePI `Bundle` from an external server, use a **conditional update** (e.g., `PUT /Bundle?identifier=http://yourcompany.com/epi|epi-456`). This updates the existing `Bundle` with the matching consistent `Bundle.identifier` (e.g., `Bundle.id: epi-456`) instead of creating a new resource with a different `Bundle.id`. The server assigns a new `Bundle.meta.versionId` (e.g., `2`) to reflect the updated version, and the version-specific `Bundle.identifier` is updated to match the new version (e.g., `epi-456-2`).
  - Example Workflow:
    - You submit a `Bundle` with `id: epi-456`, `identifier: [{system: http://yourcompany.com/epi, value: epi-456}, {system: http://yourcompany.com/epi-version, value: epi-456-draft-initial}]` to the EMA.
    - The EMA stores it with `id: ema-epi-12345`, preserving both `identifier` entries.
    - The EMA returns an updated `Bundle` (e.g., after approval) with `id: ema-epi-12345`, `identifier: [{system: http://yourcompany.com/epi, value: epi-456}, {system: http://yourcompany.com/epi-version, value: epi-456-1}]`.
    - You issue a conditional update: `PUT /Bundle?identifier=http://yourcompany.com/epi|epi-456`, updating `Bundle.id: epi-456` with a new `meta.versionId` (e.g., `2`) and version-specific `identifier` (e.g., `epi-456-2`), preserving your server’s `Bundle.id`.
  - Document exchanges with `Provenance` resources to maintain traceability. For example, when storing an EMA-returned `Bundle`, create a `Provenance` resource with `activity: import`, targeting your updated `Bundle` (e.g., `Bundle/epi-456/_history/2`) and referencing the EMA’s `Bundle` via `Provenance.entity` using its version-specific `identifier` (e.g., `http://yourcompany.com/epi-version/epi-456-1`).
  - Coordinate with external systems (e.g., EMA) on `Bundle.identifier` systems to ensure interoperability. Include additional `identifier` entries for regulatory identifiers (e.g., `system: http://ema.europa.eu/epi`, `value: ema-789`) if required.
  - If conditional updates are not supported by your server, map incoming `Bundle` instances to your ePI using the consistent `Bundle.identifier` and create a new version with an appropriate `Bundle.meta.versionId` and version-specific `Bundle.identifier`, documenting the exchange with `Provenance`.
  - See the [Version Lifecycle Scenario](#version-lifecycle-scenario) for examples of `Bundle.id`, `Bundle.meta.versionId`, and dual `Bundle.identifier` entries in draft and approved versions, which can be extended to cross-server exchanges.

## Version Lifecycle Scenario

The following table illustrates a version lifecycle for an ePI document, starting with a draft submitted as part of an original application, followed by its approval, and subsequent draft versions for stability and safety updates, each eventually approved. The scenario demonstrates the Git-like versioning model, with a master branch for approved versions and draft branches for proposed changes. The consistent `Bundle.identifier` (`system: http://yourcompany.com/epi`, `value: epi-456`) is implied for all versions but not shown for brevity.

| Bundle ID | Bundle versionId | Composition version | Composition status | Version-Specific Identifier | Description                              | Provenance Event | Derived From                | Timestamp                  |
|-----------|------------------|---------------------|--------------------|-----------------------------|------------------------------------------|------------------|-----------------------------|----------------------------|
| epi-456   | draft-initial    | 1.0-draft           | preliminary        | epi-456-draft-initial       | Draft submitted with original application | draft-created    | None                        | 2025-01-15T09:00:00Z       |
| epi-456   | 1                | 1.0                 | final              | epi-456-1                   | Draft approved, becomes master branch v1  | approve          | epi-456 (draft-initial)     | 2025-03-01T12:00:00Z       |
| epi-456   | draft-stability  | 1.1-draft           | preliminary        | epi-456-draft-stability     | Draft submitted for stability update      | draft-created    | epi-456 (1)                 | 2025-04-01T10:00:00Z       |
| epi-456   | draft-safety     | 1.2-draft           | preliminary        | epi-456-draft-safety        | Draft submitted for safety update         | draft-created    | epi-456 (1)                 | 2025-04-15T11:00:00Z       |
| epi-456   | 2                | 1.1                 | final              | epi-456-2                   | Stability draft approved, master branch v2 | approve          | epi-456 (draft-stability)   | 2025-06-01T12:00:00Z       |
| epi-456   | 3                | 1.2                 | final              | epi-456-3                   | Safety draft approved, master branch v3   | approve          | epi-456 (draft-safety)      | 2025-08-01T12:00:00Z       |

**Notes**:
- The consistent `Bundle.identifier` (`system: http://yourcompany.com/epi`, `value: epi-456`) groups all versions of the ePI document.
- The version-specific `Bundle.identifier` (`system: http://yourcompany.com/epi-version`, `value: epi-456-draft-initial`, etc.) tracks individual versions, enhancing cross-system traceability.
- Each row corresponds to a `Provenance` resource documenting the event (e.g., `draft-created`, `approve`), stored separately in the FHIR server.
- Timestamps reflect a realistic regulatory review timeline.

## Constraints and Extensions

- **Constraint**: All ePI `Bundle` resources must have a consistent `Bundle.identifier` to ensure they pertain to the same drug label, plus a version-specific `Bundle.identifier` for each version.
- **Constraint**: The master branch `Bundle` resources must have `Composition.status` set to `final`, while drafts must use `preliminary` or `entered-in-error`.
- **Extension**: Implementers may define an extension on `Bundle` or `Composition` to store regulatory-specific version metadata, such as submission IDs or approval dates (e.g., `composition-description`).
- **Profile**: Implementers should define a profile for draft ePI `Bundle` resources (e.g., `http://hl7.org/fhir/organization/epi-123`) to enforce draft-specific constraints.

### Security and Access Control

- Restrict access to draft `Bundle` resources to authorized organizations (e.g., the submitting company and regulator).
- Ensure that master branch `Bundle` resources are accessible to all authorized stakeholders (e.g., healthcare providers, patients) once approved.
- Use FHIR security labels or `Bundle.meta.security` to enforce access policies.